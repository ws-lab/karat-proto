// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.11.4
// source: grpcadder.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//Выбор версии протокола
type ArchQueryRequest_PROTOCOL int32

const (
	ArchQueryRequest_PROTOCOL18 ArchQueryRequest_PROTOCOL = 0
	ArchQueryRequest_PROTOCOL20 ArchQueryRequest_PROTOCOL = 1
)

// Enum value maps for ArchQueryRequest_PROTOCOL.
var (
	ArchQueryRequest_PROTOCOL_name = map[int32]string{
		0: "PROTOCOL18",
		1: "PROTOCOL20",
	}
	ArchQueryRequest_PROTOCOL_value = map[string]int32{
		"PROTOCOL18": 0,
		"PROTOCOL20": 1,
	}
)

func (x ArchQueryRequest_PROTOCOL) Enum() *ArchQueryRequest_PROTOCOL {
	p := new(ArchQueryRequest_PROTOCOL)
	*p = x
	return p
}

func (x ArchQueryRequest_PROTOCOL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchQueryRequest_PROTOCOL) Descriptor() protoreflect.EnumDescriptor {
	return file_grpcadder_proto_enumTypes[0].Descriptor()
}

func (ArchQueryRequest_PROTOCOL) Type() protoreflect.EnumType {
	return &file_grpcadder_proto_enumTypes[0]
}

func (x ArchQueryRequest_PROTOCOL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArchQueryRequest_PROTOCOL.Descriptor instead.
func (ArchQueryRequest_PROTOCOL) EnumDescriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{26, 0}
}

// The request message containing code packet.
type PacketConfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketCode int32 `protobuf:"varint,1,opt,name=packet_code,json=packetCode,proto3" json:"packet_code,omitempty"`
}

func (x *PacketConfRequest) Reset() {
	*x = PacketConfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketConfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketConfRequest) ProtoMessage() {}

func (x *PacketConfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketConfRequest.ProtoReflect.Descriptor instead.
func (*PacketConfRequest) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{0}
}

func (x *PacketConfRequest) GetPacketCode() int32 {
	if x != nil {
		return x.PacketCode
	}
	return 0
}

// The response message containing the PacketConf
type PacketConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code         int32               `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Index        int32               `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	ResourceId   int32               `protobuf:"varint,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	RvariableId  int32               `protobuf:"varint,5,opt,name=rvariable_id,json=rvariableId,proto3" json:"rvariable_id,omitempty"`
	RvalueId     *_struct.Value      `protobuf:"bytes,6,opt,name=rvalue_id,json=rvalueId,proto3" json:"rvalue_id,omitempty"`
	Len          int32               `protobuf:"varint,7,opt,name=len,proto3" json:"len,omitempty"`
	TypeData     int32               `protobuf:"varint,8,opt,name=type_data,json=typeData,proto3" json:"type_data,omitempty"`
	LittleEndian *wrappers.BoolValue `protobuf:"bytes,9,opt,name=little_endian,json=littleEndian,proto3" json:"little_endian,omitempty"`
	IsSensor     *wrappers.BoolValue `protobuf:"bytes,10,opt,name=is_sensor,json=isSensor,proto3" json:"is_sensor,omitempty"`
	UnitId       *_struct.Value      `protobuf:"bytes,11,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
}

func (x *PacketConf) Reset() {
	*x = PacketConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketConf) ProtoMessage() {}

func (x *PacketConf) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketConf.ProtoReflect.Descriptor instead.
func (*PacketConf) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{1}
}

func (x *PacketConf) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PacketConf) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PacketConf) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PacketConf) GetResourceId() int32 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *PacketConf) GetRvariableId() int32 {
	if x != nil {
		return x.RvariableId
	}
	return 0
}

func (x *PacketConf) GetRvalueId() *_struct.Value {
	if x != nil {
		return x.RvalueId
	}
	return nil
}

func (x *PacketConf) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *PacketConf) GetTypeData() int32 {
	if x != nil {
		return x.TypeData
	}
	return 0
}

func (x *PacketConf) GetLittleEndian() *wrappers.BoolValue {
	if x != nil {
		return x.LittleEndian
	}
	return nil
}

func (x *PacketConf) GetIsSensor() *wrappers.BoolValue {
	if x != nil {
		return x.IsSensor
	}
	return nil
}

func (x *PacketConf) GetUnitId() *_struct.Value {
	if x != nil {
		return x.UnitId
	}
	return nil
}

// return list packet configuration
type PacketConfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketConf []*PacketConf `protobuf:"bytes,1,rep,name=packet_conf,json=packetConf,proto3" json:"packet_conf,omitempty"`
}

func (x *PacketConfResponse) Reset() {
	*x = PacketConfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketConfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketConfResponse) ProtoMessage() {}

func (x *PacketConfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketConfResponse.ProtoReflect.Descriptor instead.
func (*PacketConfResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{2}
}

func (x *PacketConfResponse) GetPacketConf() []*PacketConf {
	if x != nil {
		return x.PacketConf
	}
	return nil
}

// The request message containing packet.
type PacketDecodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spacket string `protobuf:"bytes,1,opt,name=spacket,proto3" json:"spacket,omitempty"`
	Bpacket []byte `protobuf:"bytes,2,opt,name=bpacket,proto3" json:"bpacket,omitempty"`
}

func (x *PacketDecodeRequest) Reset() {
	*x = PacketDecodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketDecodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketDecodeRequest) ProtoMessage() {}

func (x *PacketDecodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketDecodeRequest.ProtoReflect.Descriptor instead.
func (*PacketDecodeRequest) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{3}
}

func (x *PacketDecodeRequest) GetSpacket() string {
	if x != nil {
		return x.Spacket
	}
	return ""
}

func (x *PacketDecodeRequest) GetBpacket() []byte {
	if x != nil {
		return x.Bpacket
	}
	return nil
}

// The request message containing param for function 0x0101.
type SettingsPacketProtocol20Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//EventMaskFlags – Маска флагов событий выхода на связь
	// в качестве параметра передается массив параметров id, см /api/status_of_flag?type=2
	EventMaskFlags []int32 `protobuf:"varint,1,rep,packed,name=event_mask_flags,json=eventMaskFlags,proto3" json:"event_mask_flags,omitempty"`
	//Передается разница времени конечного устройства и сети в секундах;
	DeltaDevTime int32 `protobuf:"varint,2,opt,name=delta_dev_time,json=deltaDevTime,proto3" json:"delta_dev_time,omitempty"`
	//Часовой пояс, параметр задается в часах
	TimeZone float32 `protobuf:"fixed32,3,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	//Cмещение выхода на связь от начала суток в секундах допустимые значения 1…43200 сек
	OffsetTime uint32 `protobuf:"varint,4,opt,name=offset_time,json=offsetTime,proto3" json:"offset_time,omitempty"`
	//период выхода на связь в минутах, допустимые значения 1…720 мин.
	TxPeriod uint32 `protobuf:"varint,5,opt,name=tx_period,json=txPeriod,proto3" json:"tx_period,omitempty"`
	// Флаги типов передаваемых архивов
	// в качестве параметра передается массив параметров id, см /api/status_of_flag?type=5
	ArchFlags []uint32 `protobuf:"varint,6,rep,packed,name=arch_flags,json=archFlags,proto3" json:"arch_flags,omitempty"`
	//Число передаваемых пакетов
	MainMsgCnt uint32 `protobuf:"varint,7,opt,name=main_msg_cnt,json=mainMsgCnt,proto3" json:"main_msg_cnt,omitempty"`
	//Код функции 1-го пакета, см /api/packet
	Mmsg1 uint32 `protobuf:"varint,8,opt,name=mmsg1,proto3" json:"mmsg1,omitempty"`
	//Код функции 2-го пакета, см /api/packet
	Mmsg2 uint32 `protobuf:"varint,9,opt,name=mmsg2,proto3" json:"mmsg2,omitempty"`
	//Код функции 3-го пакета, см /api/packet
	Mmsg3 uint32 `protobuf:"varint,10,opt,name=mmsg3,proto3" json:"mmsg3,omitempty"`
	//Код функции 4-го пакета, см /api/packet
	Mmsg4 uint32 `protobuf:"varint,11,opt,name=mmsg4,proto3" json:"mmsg4,omitempty"`
	//Код функции 5-го пакета, см /api/packet
	Mmsg5 uint32 `protobuf:"varint,12,opt,name=mmsg5,proto3" json:"mmsg5,omitempty"`
	//Код функции 6-го пакета, см /api/packet
	Mmsg6 uint32 `protobuf:"varint,13,opt,name=mmsg6,proto3" json:"mmsg6,omitempty"`
}

func (x *SettingsPacketProtocol20Request) Reset() {
	*x = SettingsPacketProtocol20Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsPacketProtocol20Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsPacketProtocol20Request) ProtoMessage() {}

func (x *SettingsPacketProtocol20Request) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsPacketProtocol20Request.ProtoReflect.Descriptor instead.
func (*SettingsPacketProtocol20Request) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{4}
}

func (x *SettingsPacketProtocol20Request) GetEventMaskFlags() []int32 {
	if x != nil {
		return x.EventMaskFlags
	}
	return nil
}

func (x *SettingsPacketProtocol20Request) GetDeltaDevTime() int32 {
	if x != nil {
		return x.DeltaDevTime
	}
	return 0
}

func (x *SettingsPacketProtocol20Request) GetTimeZone() float32 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

func (x *SettingsPacketProtocol20Request) GetOffsetTime() uint32 {
	if x != nil {
		return x.OffsetTime
	}
	return 0
}

func (x *SettingsPacketProtocol20Request) GetTxPeriod() uint32 {
	if x != nil {
		return x.TxPeriod
	}
	return 0
}

func (x *SettingsPacketProtocol20Request) GetArchFlags() []uint32 {
	if x != nil {
		return x.ArchFlags
	}
	return nil
}

func (x *SettingsPacketProtocol20Request) GetMainMsgCnt() uint32 {
	if x != nil {
		return x.MainMsgCnt
	}
	return 0
}

func (x *SettingsPacketProtocol20Request) GetMmsg1() uint32 {
	if x != nil {
		return x.Mmsg1
	}
	return 0
}

func (x *SettingsPacketProtocol20Request) GetMmsg2() uint32 {
	if x != nil {
		return x.Mmsg2
	}
	return 0
}

func (x *SettingsPacketProtocol20Request) GetMmsg3() uint32 {
	if x != nil {
		return x.Mmsg3
	}
	return 0
}

func (x *SettingsPacketProtocol20Request) GetMmsg4() uint32 {
	if x != nil {
		return x.Mmsg4
	}
	return 0
}

func (x *SettingsPacketProtocol20Request) GetMmsg5() uint32 {
	if x != nil {
		return x.Mmsg5
	}
	return 0
}

func (x *SettingsPacketProtocol20Request) GetMmsg6() uint32 {
	if x != nil {
		return x.Mmsg6
	}
	return 0
}

// The response message containing base64 response for function 0x0101.
type SettingsPacketProtocol20Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bpacket []byte `protobuf:"bytes,1,opt,name=bpacket,proto3" json:"bpacket,omitempty"`
	Spacket string `protobuf:"bytes,2,opt,name=spacket,proto3" json:"spacket,omitempty"`
}

func (x *SettingsPacketProtocol20Response) Reset() {
	*x = SettingsPacketProtocol20Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsPacketProtocol20Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsPacketProtocol20Response) ProtoMessage() {}

func (x *SettingsPacketProtocol20Response) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsPacketProtocol20Response.ProtoReflect.Descriptor instead.
func (*SettingsPacketProtocol20Response) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{5}
}

func (x *SettingsPacketProtocol20Response) GetBpacket() []byte {
	if x != nil {
		return x.Bpacket
	}
	return nil
}

func (x *SettingsPacketProtocol20Response) GetSpacket() string {
	if x != nil {
		return x.Spacket
	}
	return ""
}

// The request message containing param for function 0x0101.
type SettingsPacketProtocol18Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//LWTime – Время конечного устройства,format := "2006-01-02 15:04:05"
	//Если данное поле не используется,то оставляется не заполненным в пакете формируется значение 0xFFFFFFFFFFFF
	//Задается либо lw_time, либо delta_dev_time, если задано lw_time, то delta_dev_time = 0
	LwTime string `protobuf:"bytes,1,opt,name=lw_time,json=lwTime,proto3" json:"lw_time,omitempty"`
	//Смещение часов между конечным устройством и часами сервера точного времени;
	DeltaDevTime int32 `protobuf:"varint,2,opt,name=delta_dev_time,json=deltaDevTime,proto3" json:"delta_dev_time,omitempty"`
	//Часовой пояс, параметр задается в часах
	TimeZone float32 `protobuf:"fixed32,3,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	//Cмещение выхода на связь от начала суток в секундах допустимые значения 1…43200 сек
	OffsetTime uint32 `protobuf:"varint,4,opt,name=offset_time,json=offsetTime,proto3" json:"offset_time,omitempty"`
	//период выхода на связь в секундах
	TxPeriod uint32 `protobuf:"varint,5,opt,name=tx_period,json=txPeriod,proto3" json:"tx_period,omitempty"`
	// Флаги типов передаваемых архивов
	// в качестве параметра передается массив параметров id, см /api/status_of_flag?type=5
	ArchFlags []uint32 `protobuf:"varint,6,rep,packed,name=arch_flags,json=archFlags,proto3" json:"arch_flags,omitempty"`
	//Число передаваемых пакетов
	MainMsgCnt uint32 `protobuf:"varint,7,opt,name=main_msg_cnt,json=mainMsgCnt,proto3" json:"main_msg_cnt,omitempty"`
	//Код функции 1-го пакета, см /api/packet
	Mmsg1 uint32 `protobuf:"varint,8,opt,name=mmsg1,proto3" json:"mmsg1,omitempty"`
	//Код функции 2-го пакета, см /api/packet
	Mmsg2 uint32 `protobuf:"varint,9,opt,name=mmsg2,proto3" json:"mmsg2,omitempty"`
	//Код функции 3-го пакета, см /api/packet
	Mmsg3 uint32 `protobuf:"varint,10,opt,name=mmsg3,proto3" json:"mmsg3,omitempty"`
	//Код функции 4-го пакета, см /api/packet
	Mmsg4 uint32 `protobuf:"varint,11,opt,name=mmsg4,proto3" json:"mmsg4,omitempty"`
	//Код функции 5-го пакета, см /api/packet
	Mmsg5 uint32 `protobuf:"varint,12,opt,name=mmsg5,proto3" json:"mmsg5,omitempty"`
	//Код функции 6-го пакета, см /api/packet
	Mmsg6 uint32 `protobuf:"varint,13,opt,name=mmsg6,proto3" json:"mmsg6,omitempty"`
	//Дата отчетного периода
	RepDate uint32 `protobuf:"varint,14,opt,name=rep_date,json=repDate,proto3" json:"rep_date,omitempty"`
}

func (x *SettingsPacketProtocol18Request) Reset() {
	*x = SettingsPacketProtocol18Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsPacketProtocol18Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsPacketProtocol18Request) ProtoMessage() {}

func (x *SettingsPacketProtocol18Request) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsPacketProtocol18Request.ProtoReflect.Descriptor instead.
func (*SettingsPacketProtocol18Request) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{6}
}

func (x *SettingsPacketProtocol18Request) GetLwTime() string {
	if x != nil {
		return x.LwTime
	}
	return ""
}

func (x *SettingsPacketProtocol18Request) GetDeltaDevTime() int32 {
	if x != nil {
		return x.DeltaDevTime
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetTimeZone() float32 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetOffsetTime() uint32 {
	if x != nil {
		return x.OffsetTime
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetTxPeriod() uint32 {
	if x != nil {
		return x.TxPeriod
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetArchFlags() []uint32 {
	if x != nil {
		return x.ArchFlags
	}
	return nil
}

func (x *SettingsPacketProtocol18Request) GetMainMsgCnt() uint32 {
	if x != nil {
		return x.MainMsgCnt
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetMmsg1() uint32 {
	if x != nil {
		return x.Mmsg1
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetMmsg2() uint32 {
	if x != nil {
		return x.Mmsg2
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetMmsg3() uint32 {
	if x != nil {
		return x.Mmsg3
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetMmsg4() uint32 {
	if x != nil {
		return x.Mmsg4
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetMmsg5() uint32 {
	if x != nil {
		return x.Mmsg5
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetMmsg6() uint32 {
	if x != nil {
		return x.Mmsg6
	}
	return 0
}

func (x *SettingsPacketProtocol18Request) GetRepDate() uint32 {
	if x != nil {
		return x.RepDate
	}
	return 0
}

// The response message containing base64 response for function 0x0015.
type SettingsPacketProtocol18Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bpacket []byte `protobuf:"bytes,1,opt,name=bpacket,proto3" json:"bpacket,omitempty"`
	Spacket string `protobuf:"bytes,2,opt,name=spacket,proto3" json:"spacket,omitempty"`
}

func (x *SettingsPacketProtocol18Response) Reset() {
	*x = SettingsPacketProtocol18Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsPacketProtocol18Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsPacketProtocol18Response) ProtoMessage() {}

func (x *SettingsPacketProtocol18Response) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsPacketProtocol18Response.ProtoReflect.Descriptor instead.
func (*SettingsPacketProtocol18Response) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{7}
}

func (x *SettingsPacketProtocol18Response) GetBpacket() []byte {
	if x != nil {
		return x.Bpacket
	}
	return nil
}

func (x *SettingsPacketProtocol18Response) GetSpacket() string {
	if x != nil {
		return x.Spacket
	}
	return ""
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{8}
}

// The response message containing the PacketDecode
type PacketDecodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Func        int32   `protobuf:"varint,1,opt,name=func,proto3" json:"func,omitempty"`
	Datas       []*Data `protobuf:"bytes,2,rep,name=datas,proto3" json:"datas,omitempty"`
	ResourceInx int32   `protobuf:"varint,3,opt,name=resource_inx,json=resourceInx,proto3" json:"resource_inx,omitempty"`
	PacketError string  `protobuf:"bytes,4,opt,name=packet_error,json=packetError,proto3" json:"packet_error,omitempty"`
	PacketType  int32   `protobuf:"varint,5,opt,name=packet_type,json=packetType,proto3" json:"packet_type,omitempty"`
}

func (x *PacketDecodeResponse) Reset() {
	*x = PacketDecodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketDecodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketDecodeResponse) ProtoMessage() {}

func (x *PacketDecodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketDecodeResponse.ProtoReflect.Descriptor instead.
func (*PacketDecodeResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{9}
}

func (x *PacketDecodeResponse) GetFunc() int32 {
	if x != nil {
		return x.Func
	}
	return 0
}

func (x *PacketDecodeResponse) GetDatas() []*Data {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *PacketDecodeResponse) GetResourceInx() int32 {
	if x != nil {
		return x.ResourceInx
	}
	return 0
}

func (x *PacketDecodeResponse) GetPacketError() string {
	if x != nil {
		return x.PacketError
	}
	return ""
}

func (x *PacketDecodeResponse) GetPacketType() int32 {
	if x != nil {
		return x.PacketType
	}
	return 0
}

// The response message containing the PacketDecode
type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Vr         string   `protobuf:"bytes,2,opt,name=vr,proto3" json:"vr,omitempty"`
	Models     []string `protobuf:"bytes,3,rep,name=models,proto3" json:"models,omitempty"`
	PacketType int32    `protobuf:"varint,4,opt,name=packet_type,json=packetType,proto3" json:"packet_type,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{10}
}

func (x *Packet) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Packet) GetVr() string {
	if x != nil {
		return x.Vr
	}
	return ""
}

func (x *Packet) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *Packet) GetPacketType() int32 {
	if x != nil {
		return x.PacketType
	}
	return 0
}

// return list packet
type PacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet []*Packet `protobuf:"bytes,1,rep,name=packet,proto3" json:"packet,omitempty"`
}

func (x *PacketResponse) Reset() {
	*x = PacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketResponse) ProtoMessage() {}

func (x *PacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketResponse.ProtoReflect.Descriptor instead.
func (*PacketResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{11}
}

func (x *PacketResponse) GetPacket() []*Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

// The response message value of config packet
type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RvalueId    int32          `protobuf:"varint,1,opt,name=rvalue_id,json=rvalueId,proto3" json:"rvalue_id,omitempty"`
	Value       *_struct.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Alias       string         `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	ResourceId  int32          `protobuf:"varint,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	RvariableId int32          `protobuf:"varint,5,opt,name=rvariable_id,json=rvariableId,proto3" json:"rvariable_id,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{12}
}

func (x *Data) GetRvalueId() int32 {
	if x != nil {
		return x.RvalueId
	}
	return 0
}

func (x *Data) GetValue() *_struct.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Data) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Data) GetResourceId() int32 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *Data) GetRvariableId() int32 {
	if x != nil {
		return x.RvariableId
	}
	return 0
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{13}
}

func (x *Resource) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// return list resource
type ResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource []*Resource `protobuf:"bytes,1,rep,name=resource,proto3" json:"resource,omitempty"`
}

func (x *ResourceResponse) Reset() {
	*x = ResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceResponse) ProtoMessage() {}

func (x *ResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceResponse.ProtoReflect.Descriptor instead.
func (*ResourceResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{14}
}

func (x *ResourceResponse) GetResource() []*Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type Rvariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Alias string `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Rvariable) Reset() {
	*x = Rvariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rvariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rvariable) ProtoMessage() {}

func (x *Rvariable) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rvariable.ProtoReflect.Descriptor instead.
func (*Rvariable) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{15}
}

func (x *Rvariable) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Rvariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rvariable) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

// return list rvariable
type RvariableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rvariable []*Rvariable `protobuf:"bytes,1,rep,name=rvariable,proto3" json:"rvariable,omitempty"`
}

func (x *RvariableResponse) Reset() {
	*x = RvariableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RvariableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RvariableResponse) ProtoMessage() {}

func (x *RvariableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RvariableResponse.ProtoReflect.Descriptor instead.
func (*RvariableResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{16}
}

func (x *RvariableResponse) GetRvariable() []*Rvariable {
	if x != nil {
		return x.Rvariable
	}
	return nil
}

// return list rvalue
type RvalueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rvalues []*Rvalue `protobuf:"bytes,1,rep,name=rvalues,proto3" json:"rvalues,omitempty"`
}

func (x *RvalueResponse) Reset() {
	*x = RvalueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RvalueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RvalueResponse) ProtoMessage() {}

func (x *RvalueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RvalueResponse.ProtoReflect.Descriptor instead.
func (*RvalueResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{17}
}

func (x *RvalueResponse) GetRvalues() []*Rvalue {
	if x != nil {
		return x.Rvalues
	}
	return nil
}

type Rvalue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceId  int32          `protobuf:"varint,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	RvariableId int32          `protobuf:"varint,4,opt,name=rvariable_id,json=rvariableId,proto3" json:"rvariable_id,omitempty"`
	UnitId      *_struct.Value `protobuf:"bytes,5,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
}

func (x *Rvalue) Reset() {
	*x = Rvalue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rvalue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rvalue) ProtoMessage() {}

func (x *Rvalue) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rvalue.ProtoReflect.Descriptor instead.
func (*Rvalue) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{18}
}

func (x *Rvalue) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Rvalue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rvalue) GetResourceId() int32 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

func (x *Rvalue) GetRvariableId() int32 {
	if x != nil {
		return x.RvariableId
	}
	return 0
}

func (x *Rvalue) GetUnitId() *_struct.Value {
	if x != nil {
		return x.UnitId
	}
	return nil
}

// return list unit
type UnitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units []*Unit `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
}

func (x *UnitResponse) Reset() {
	*x = UnitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitResponse) ProtoMessage() {}

func (x *UnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitResponse.ProtoReflect.Descriptor instead.
func (*UnitResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{19}
}

func (x *UnitResponse) GetUnits() []*Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

type Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RvariableId int32   `protobuf:"varint,3,opt,name=rvariable_id,json=rvariableId,proto3" json:"rvariable_id,omitempty"`
	Multiplier  float32 `protobuf:"fixed32,4,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *Unit) Reset() {
	*x = Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{20}
}

func (x *Unit) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Unit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Unit) GetRvariableId() int32 {
	if x != nil {
		return x.RvariableId
	}
	return 0
}

func (x *Unit) GetMultiplier() float32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

// request of type Flag
type FlagOfTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type = 1 получение списка ошибок по приборам
	// type = 2 получение списка флагов событий (параметр EventMaskFlags)
	// type = 3 получение списка флагов статусов связи (параметр ConStatusFlags)
	// type = 4 получение списка перечня флагов для функции 0x0021 (параметр CFlags)
	// type = 5 получение списка типов архивов
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FlagOfTypeRequest) Reset() {
	*x = FlagOfTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagOfTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagOfTypeRequest) ProtoMessage() {}

func (x *FlagOfTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagOfTypeRequest.ProtoReflect.Descriptor instead.
func (*FlagOfTypeRequest) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{21}
}

func (x *FlagOfTypeRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// return list flag of type
type FlagOfTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags []*FlagOfType `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
}

func (x *FlagOfTypeResponse) Reset() {
	*x = FlagOfTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagOfTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagOfTypeResponse) ProtoMessage() {}

func (x *FlagOfTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagOfTypeResponse.ProtoReflect.Descriptor instead.
func (*FlagOfTypeResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{22}
}

func (x *FlagOfTypeResponse) GetFlags() []*FlagOfType {
	if x != nil {
		return x.Flags
	}
	return nil
}

type FlagOfType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Note    string         `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	Byte    string         `protobuf:"bytes,3,opt,name=byte,proto3" json:"byte,omitempty"`
	Nbit    *_struct.Value `protobuf:"bytes,4,opt,name=nbit,proto3" json:"nbit,omitempty"`
	Devices string         `protobuf:"bytes,5,opt,name=devices,proto3" json:"devices,omitempty"`
}

func (x *FlagOfType) Reset() {
	*x = FlagOfType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagOfType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagOfType) ProtoMessage() {}

func (x *FlagOfType) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagOfType.ProtoReflect.Descriptor instead.
func (*FlagOfType) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{23}
}

func (x *FlagOfType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FlagOfType) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *FlagOfType) GetByte() string {
	if x != nil {
		return x.Byte
	}
	return ""
}

func (x *FlagOfType) GetNbit() *_struct.Value {
	if x != nil {
		return x.Nbit
	}
	return nil
}

func (x *FlagOfType) GetDevices() string {
	if x != nil {
		return x.Devices
	}
	return ""
}

// The request message containing param for function 0x0016.
type TimeCorrectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Сдвиг конечного устройства в секундах
	//положительный сдвиг (часы конечного устройства отстают), отрицательный сдвиг (часы конечного устройства идут вперед)
	//Работает со всеми версиями протокола
	DeltaTime int32 `protobuf:"varint,1,opt,name=delta_time,json=deltaTime,proto3" json:"delta_time,omitempty"`
}

func (x *TimeCorrectRequest) Reset() {
	*x = TimeCorrectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeCorrectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeCorrectRequest) ProtoMessage() {}

func (x *TimeCorrectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeCorrectRequest.ProtoReflect.Descriptor instead.
func (*TimeCorrectRequest) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{24}
}

func (x *TimeCorrectRequest) GetDeltaTime() int32 {
	if x != nil {
		return x.DeltaTime
	}
	return 0
}

// The response message containing base64 response for function 0x0016.
type TimeCorrectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bpacket []byte `protobuf:"bytes,1,opt,name=bpacket,proto3" json:"bpacket,omitempty"`
	Spacket string `protobuf:"bytes,2,opt,name=spacket,proto3" json:"spacket,omitempty"`
}

func (x *TimeCorrectResponse) Reset() {
	*x = TimeCorrectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeCorrectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeCorrectResponse) ProtoMessage() {}

func (x *TimeCorrectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeCorrectResponse.ProtoReflect.Descriptor instead.
func (*TimeCorrectResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{25}
}

func (x *TimeCorrectResponse) GetBpacket() []byte {
	if x != nil {
		return x.Bpacket
	}
	return nil
}

func (x *TimeCorrectResponse) GetSpacket() string {
	if x != nil {
		return x.Spacket
	}
	return ""
}

// The request message containing param for function query archive.
type ArchQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Параметр отвечает за версию протокола
	ProtocolVersion ArchQueryRequest_PROTOCOL `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3,enum=proto.pb.ArchQueryRequest_PROTOCOL" json:"protocol_version,omitempty"`
	//ArchTime – Время запрашиваемого архива,format := "2006-01-02 15:04:05"
	ArchTime string `protobuf:"bytes,2,opt,name=arch_time,json=archTime,proto3" json:"arch_time,omitempty"`
	// Тип запрафиваемого архива
	// в качестве параметра передается id, см /api/status_of_flag?type=5
	ArchType uint32 `protobuf:"varint,3,opt,name=arch_type,json=archType,proto3" json:"arch_type,omitempty"`
}

func (x *ArchQueryRequest) Reset() {
	*x = ArchQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchQueryRequest) ProtoMessage() {}

func (x *ArchQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchQueryRequest.ProtoReflect.Descriptor instead.
func (*ArchQueryRequest) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{26}
}

func (x *ArchQueryRequest) GetProtocolVersion() ArchQueryRequest_PROTOCOL {
	if x != nil {
		return x.ProtocolVersion
	}
	return ArchQueryRequest_PROTOCOL18
}

func (x *ArchQueryRequest) GetArchTime() string {
	if x != nil {
		return x.ArchTime
	}
	return ""
}

func (x *ArchQueryRequest) GetArchType() uint32 {
	if x != nil {
		return x.ArchType
	}
	return 0
}

// The response message containing base64 response for function query archive.
type ArchQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bpacket []byte `protobuf:"bytes,1,opt,name=bpacket,proto3" json:"bpacket,omitempty"`
	Spacket string `protobuf:"bytes,2,opt,name=spacket,proto3" json:"spacket,omitempty"`
}

func (x *ArchQueryResponse) Reset() {
	*x = ArchQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchQueryResponse) ProtoMessage() {}

func (x *ArchQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchQueryResponse.ProtoReflect.Descriptor instead.
func (*ArchQueryResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{27}
}

func (x *ArchQueryResponse) GetBpacket() []byte {
	if x != nil {
		return x.Bpacket
	}
	return nil
}

func (x *ArchQueryResponse) GetSpacket() string {
	if x != nil {
		return x.Spacket
	}
	return ""
}

// The request message containing param for function 0x0021.
type LoraWanParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Параметры подключения,скорость (DR), по умолчанию = 32
	JoinParams int32 `protobuf:"varint,1,opt,name=join_params,json=joinParams,proto3" json:"join_params,omitempty"`
	//Частота 2-го окна приема, по умолчанию = 8691000
	Dn2Freq int32 `protobuf:"varint,2,opt,name=dn2freq,proto3" json:"dn2freq,omitempty"`
	//Порт, на который нода отправляет пакеты, по умолчанию = 5
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	//Число попыток передачи, по умолчанию = 3
	TxAtts int32 `protobuf:"varint,4,opt,name=tx_atts,json=txAtts,proto3" json:"tx_atts,omitempty"`
	//Параметры адаптации скорости, по умолчанию = 34
	AdrParam int32 `protobuf:"varint,5,opt,name=adr_param,json=adrParam,proto3" json:"adr_param,omitempty"`
	//Управляющие флаги
	// в качестве параметра передается массив id, см /api/status_of_flag?type=4
	Cflags []int32 `protobuf:"varint,6,rep,packed,name=cflags,proto3" json:"cflags,omitempty"`
}

func (x *LoraWanParamsRequest) Reset() {
	*x = LoraWanParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraWanParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraWanParamsRequest) ProtoMessage() {}

func (x *LoraWanParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraWanParamsRequest.ProtoReflect.Descriptor instead.
func (*LoraWanParamsRequest) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{28}
}

func (x *LoraWanParamsRequest) GetJoinParams() int32 {
	if x != nil {
		return x.JoinParams
	}
	return 0
}

func (x *LoraWanParamsRequest) GetDn2Freq() int32 {
	if x != nil {
		return x.Dn2Freq
	}
	return 0
}

func (x *LoraWanParamsRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LoraWanParamsRequest) GetTxAtts() int32 {
	if x != nil {
		return x.TxAtts
	}
	return 0
}

func (x *LoraWanParamsRequest) GetAdrParam() int32 {
	if x != nil {
		return x.AdrParam
	}
	return 0
}

func (x *LoraWanParamsRequest) GetCflags() []int32 {
	if x != nil {
		return x.Cflags
	}
	return nil
}

// The response message containing base64 response for function 0x0016.
type LoraWanParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bpacket []byte `protobuf:"bytes,1,opt,name=bpacket,proto3" json:"bpacket,omitempty"`
	Spacket string `protobuf:"bytes,2,opt,name=spacket,proto3" json:"spacket,omitempty"`
}

func (x *LoraWanParamsResponse) Reset() {
	*x = LoraWanParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraWanParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraWanParamsResponse) ProtoMessage() {}

func (x *LoraWanParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraWanParamsResponse.ProtoReflect.Descriptor instead.
func (*LoraWanParamsResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{29}
}

func (x *LoraWanParamsResponse) GetBpacket() []byte {
	if x != nil {
		return x.Bpacket
	}
	return nil
}

func (x *LoraWanParamsResponse) GetSpacket() string {
	if x != nil {
		return x.Spacket
	}
	return ""
}

// The request message containing body for function 0x0014,0x0021,0x0100,0x0101.
type FunctionWithEmptyParamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Выбор номер функции для получения информации
	// Функция 20 - комплексное чтение параметров (версия протокола 1.8)
	// Функция 33 - чтение/установка параметров сети LoRaWAN (версия протокола 2.0)
	// Функция 256 - Чтение информации о конечном устройстве (версия протокола 2.0)
	// Функция 257 - Комплексное чтение/установка параметров конечного устройства с несколькими пакетами данных (версия протокола 2.0)
	FunctionCode int32 `protobuf:"varint,1,opt,name=function_code,json=functionCode,proto3" json:"function_code,omitempty"`
}

func (x *FunctionWithEmptyParamRequest) Reset() {
	*x = FunctionWithEmptyParamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionWithEmptyParamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionWithEmptyParamRequest) ProtoMessage() {}

func (x *FunctionWithEmptyParamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionWithEmptyParamRequest.ProtoReflect.Descriptor instead.
func (*FunctionWithEmptyParamRequest) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{30}
}

func (x *FunctionWithEmptyParamRequest) GetFunctionCode() int32 {
	if x != nil {
		return x.FunctionCode
	}
	return 0
}

// The response message containing base64 response for function 0x0016.
type FunctionWithEmptyParamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bpacket []byte `protobuf:"bytes,1,opt,name=bpacket,proto3" json:"bpacket,omitempty"`
	Spacket string `protobuf:"bytes,2,opt,name=spacket,proto3" json:"spacket,omitempty"`
}

func (x *FunctionWithEmptyParamResponse) Reset() {
	*x = FunctionWithEmptyParamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpcadder_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionWithEmptyParamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionWithEmptyParamResponse) ProtoMessage() {}

func (x *FunctionWithEmptyParamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpcadder_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionWithEmptyParamResponse.ProtoReflect.Descriptor instead.
func (*FunctionWithEmptyParamResponse) Descriptor() ([]byte, []int) {
	return file_grpcadder_proto_rawDescGZIP(), []int{31}
}

func (x *FunctionWithEmptyParamResponse) GetBpacket() []byte {
	if x != nil {
		return x.Bpacket
	}
	return nil
}

func (x *FunctionWithEmptyParamResponse) GetSpacket() string {
	if x != nil {
		return x.Spacket
	}
	return ""
}

var File_grpcadder_proto protoreflect.FileDescriptor

var file_grpcadder_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x61, 0x64, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x99, 0x03, 0x0a, 0x0a,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0d,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x37, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x73,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x12, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x22, 0x49, 0x0a, 0x13, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22,
	0x91, 0x03, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x32, 0x30, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x65, 0x76, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x78, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x43, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x6d, 0x73, 0x67, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x32, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6d, 0x73, 0x67, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6d, 0x73, 0x67,
	0x33, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x35,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x35, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6d, 0x73, 0x67, 0x36, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6d,
	0x73, 0x67, 0x36, 0x22, 0x56, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x32, 0x30, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x9b, 0x03, 0x0a, 0x1f,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x31, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x65, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x78, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x43, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6d,
	0x73, 0x67, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x31,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x6d, 0x73, 0x67, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x33, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x33, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6d, 0x73, 0x67, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6d, 0x73,
	0x67, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x35, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6d, 0x73, 0x67,
	0x36, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6d, 0x73, 0x67, 0x36, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x44, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x20, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x31, 0x38, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x62, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75,
	0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x24,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x06, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x76, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a,
	0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x45, 0x0a, 0x09,
	0x52, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x22, 0x46, 0x0a, 0x11, 0x52, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x09, 0x72, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x0e, 0x52,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x06, 0x52, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a,
	0x0c, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x22, 0x27, 0x0a, 0x11, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x12, 0x46,
	0x6c, 0x61, 0x67, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x8a, 0x01,
	0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x79, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x62, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x62, 0x69, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x12, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x49, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x41,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2a, 0x0a, 0x08, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x31, 0x38, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x32, 0x30, 0x10, 0x01, 0x22, 0x47, 0x0a, 0x11, 0x41, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xb3,
	0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x72, 0x61, 0x57, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6a, 0x6f,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e, 0x32, 0x66,
	0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x6e, 0x32, 0x66, 0x72,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x61, 0x74, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x78, 0x41, 0x74, 0x74, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x64, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0x4b, 0x0a, 0x15, 0x4c, 0x6f, 0x72, 0x61, 0x57, 0x61, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x62, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x44, 0x0a, 0x1d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x1e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x32, 0x9c, 0x0c,
	0x0a, 0x0a, 0x4b, 0x61, 0x72, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x0c,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x64,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x12, 0x58, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12,
	0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5b,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x52, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x4c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x12, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x12, 0xa1, 0x01,
	0x0a, 0x1b, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x32, 0x30, 0x12, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x32,
	0x30, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x32, 0x30, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x32,
	0x30, 0x12, 0xa1, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x31,
	0x38, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x31, 0x38, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x31, 0x38,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x31, 0x38, 0x12, 0x67, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x6b,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x63, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x78, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x73, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x72, 0x61, 0x57, 0x61, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x72, 0x61, 0x57, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x72, 0x61, 0x57, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x78, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x78, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0xcf, 0x01, 0x5a,
	0x04, 0x2e, 0x3b, 0x70, 0x62, 0x92, 0x41, 0xc5, 0x01, 0x12, 0x5f, 0x0a, 0x1e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x4b, 0x61, 0x72, 0x61, 0x74, 0x20, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x26, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x6b, 0x61, 0x72, 0x61, 0x74, 0x2d, 0x64, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0e, 0x73, 0x65, 0x72, 0x67, 0x40, 0x77, 0x73, 0x2d, 0x6c,
	0x61, 0x62, 0x2e, 0x72, 0x75, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x52, 0x3b, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpcadder_proto_rawDescOnce sync.Once
	file_grpcadder_proto_rawDescData = file_grpcadder_proto_rawDesc
)

func file_grpcadder_proto_rawDescGZIP() []byte {
	file_grpcadder_proto_rawDescOnce.Do(func() {
		file_grpcadder_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpcadder_proto_rawDescData)
	})
	return file_grpcadder_proto_rawDescData
}

var file_grpcadder_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_grpcadder_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_grpcadder_proto_goTypes = []interface{}{
	(ArchQueryRequest_PROTOCOL)(0),           // 0: proto.pb.ArchQueryRequest.PROTOCOL
	(*PacketConfRequest)(nil),                // 1: proto.pb.PacketConfRequest
	(*PacketConf)(nil),                       // 2: proto.pb.PacketConf
	(*PacketConfResponse)(nil),               // 3: proto.pb.PacketConfResponse
	(*PacketDecodeRequest)(nil),              // 4: proto.pb.PacketDecodeRequest
	(*SettingsPacketProtocol20Request)(nil),  // 5: proto.pb.SettingsPacketProtocol20Request
	(*SettingsPacketProtocol20Response)(nil), // 6: proto.pb.SettingsPacketProtocol20Response
	(*SettingsPacketProtocol18Request)(nil),  // 7: proto.pb.SettingsPacketProtocol18Request
	(*SettingsPacketProtocol18Response)(nil), // 8: proto.pb.SettingsPacketProtocol18Response
	(*EmptyRequest)(nil),                     // 9: proto.pb.EmptyRequest
	(*PacketDecodeResponse)(nil),             // 10: proto.pb.PacketDecodeResponse
	(*Packet)(nil),                           // 11: proto.pb.Packet
	(*PacketResponse)(nil),                   // 12: proto.pb.PacketResponse
	(*Data)(nil),                             // 13: proto.pb.Data
	(*Resource)(nil),                         // 14: proto.pb.Resource
	(*ResourceResponse)(nil),                 // 15: proto.pb.ResourceResponse
	(*Rvariable)(nil),                        // 16: proto.pb.Rvariable
	(*RvariableResponse)(nil),                // 17: proto.pb.RvariableResponse
	(*RvalueResponse)(nil),                   // 18: proto.pb.RvalueResponse
	(*Rvalue)(nil),                           // 19: proto.pb.Rvalue
	(*UnitResponse)(nil),                     // 20: proto.pb.UnitResponse
	(*Unit)(nil),                             // 21: proto.pb.Unit
	(*FlagOfTypeRequest)(nil),                // 22: proto.pb.FlagOfTypeRequest
	(*FlagOfTypeResponse)(nil),               // 23: proto.pb.FlagOfTypeResponse
	(*FlagOfType)(nil),                       // 24: proto.pb.FlagOfType
	(*TimeCorrectRequest)(nil),               // 25: proto.pb.TimeCorrectRequest
	(*TimeCorrectResponse)(nil),              // 26: proto.pb.TimeCorrectResponse
	(*ArchQueryRequest)(nil),                 // 27: proto.pb.ArchQueryRequest
	(*ArchQueryResponse)(nil),                // 28: proto.pb.ArchQueryResponse
	(*LoraWanParamsRequest)(nil),             // 29: proto.pb.LoraWanParamsRequest
	(*LoraWanParamsResponse)(nil),            // 30: proto.pb.LoraWanParamsResponse
	(*FunctionWithEmptyParamRequest)(nil),    // 31: proto.pb.FunctionWithEmptyParamRequest
	(*FunctionWithEmptyParamResponse)(nil),   // 32: proto.pb.FunctionWithEmptyParamResponse
	(*_struct.Value)(nil),                    // 33: google.protobuf.Value
	(*wrappers.BoolValue)(nil),               // 34: google.protobuf.BoolValue
}
var file_grpcadder_proto_depIdxs = []int32{
	33, // 0: proto.pb.PacketConf.rvalue_id:type_name -> google.protobuf.Value
	34, // 1: proto.pb.PacketConf.little_endian:type_name -> google.protobuf.BoolValue
	34, // 2: proto.pb.PacketConf.is_sensor:type_name -> google.protobuf.BoolValue
	33, // 3: proto.pb.PacketConf.unit_id:type_name -> google.protobuf.Value
	2,  // 4: proto.pb.PacketConfResponse.packet_conf:type_name -> proto.pb.PacketConf
	13, // 5: proto.pb.PacketDecodeResponse.datas:type_name -> proto.pb.Data
	11, // 6: proto.pb.PacketResponse.packet:type_name -> proto.pb.Packet
	33, // 7: proto.pb.Data.value:type_name -> google.protobuf.Value
	14, // 8: proto.pb.ResourceResponse.resource:type_name -> proto.pb.Resource
	16, // 9: proto.pb.RvariableResponse.rvariable:type_name -> proto.pb.Rvariable
	19, // 10: proto.pb.RvalueResponse.rvalues:type_name -> proto.pb.Rvalue
	33, // 11: proto.pb.Rvalue.unit_id:type_name -> google.protobuf.Value
	21, // 12: proto.pb.UnitResponse.units:type_name -> proto.pb.Unit
	24, // 13: proto.pb.FlagOfTypeResponse.flags:type_name -> proto.pb.FlagOfType
	33, // 14: proto.pb.FlagOfType.nbit:type_name -> google.protobuf.Value
	0,  // 15: proto.pb.ArchQueryRequest.protocol_version:type_name -> proto.pb.ArchQueryRequest.PROTOCOL
	4,  // 16: proto.pb.KaratProto.PacketDecode:input_type -> proto.pb.PacketDecodeRequest
	9,  // 17: proto.pb.KaratProto.GetPacket:input_type -> proto.pb.EmptyRequest
	1,  // 18: proto.pb.KaratProto.GetPacketConf:input_type -> proto.pb.PacketConfRequest
	9,  // 19: proto.pb.KaratProto.GetResource:input_type -> proto.pb.EmptyRequest
	9,  // 20: proto.pb.KaratProto.GetRvariable:input_type -> proto.pb.EmptyRequest
	9,  // 21: proto.pb.KaratProto.GetRvalue:input_type -> proto.pb.EmptyRequest
	9,  // 22: proto.pb.KaratProto.GetUnit:input_type -> proto.pb.EmptyRequest
	5,  // 23: proto.pb.KaratProto.SetSettingsPacketProtocol20:input_type -> proto.pb.SettingsPacketProtocol20Request
	7,  // 24: proto.pb.KaratProto.SetSettingsPacketProtocol18:input_type -> proto.pb.SettingsPacketProtocol18Request
	22, // 25: proto.pb.KaratProto.GetFlagOfType:input_type -> proto.pb.FlagOfTypeRequest
	25, // 26: proto.pb.KaratProto.SetTimeCorrect:input_type -> proto.pb.TimeCorrectRequest
	27, // 27: proto.pb.KaratProto.SetArchQuery:input_type -> proto.pb.ArchQueryRequest
	29, // 28: proto.pb.KaratProto.SetLoraWanParams:input_type -> proto.pb.LoraWanParamsRequest
	31, // 29: proto.pb.KaratProto.SetFunctionWithEmptyParam:input_type -> proto.pb.FunctionWithEmptyParamRequest
	10, // 30: proto.pb.KaratProto.PacketDecode:output_type -> proto.pb.PacketDecodeResponse
	12, // 31: proto.pb.KaratProto.GetPacket:output_type -> proto.pb.PacketResponse
	3,  // 32: proto.pb.KaratProto.GetPacketConf:output_type -> proto.pb.PacketConfResponse
	15, // 33: proto.pb.KaratProto.GetResource:output_type -> proto.pb.ResourceResponse
	17, // 34: proto.pb.KaratProto.GetRvariable:output_type -> proto.pb.RvariableResponse
	18, // 35: proto.pb.KaratProto.GetRvalue:output_type -> proto.pb.RvalueResponse
	20, // 36: proto.pb.KaratProto.GetUnit:output_type -> proto.pb.UnitResponse
	6,  // 37: proto.pb.KaratProto.SetSettingsPacketProtocol20:output_type -> proto.pb.SettingsPacketProtocol20Response
	8,  // 38: proto.pb.KaratProto.SetSettingsPacketProtocol18:output_type -> proto.pb.SettingsPacketProtocol18Response
	23, // 39: proto.pb.KaratProto.GetFlagOfType:output_type -> proto.pb.FlagOfTypeResponse
	26, // 40: proto.pb.KaratProto.SetTimeCorrect:output_type -> proto.pb.TimeCorrectResponse
	28, // 41: proto.pb.KaratProto.SetArchQuery:output_type -> proto.pb.ArchQueryResponse
	30, // 42: proto.pb.KaratProto.SetLoraWanParams:output_type -> proto.pb.LoraWanParamsResponse
	32, // 43: proto.pb.KaratProto.SetFunctionWithEmptyParam:output_type -> proto.pb.FunctionWithEmptyParamResponse
	30, // [30:44] is the sub-list for method output_type
	16, // [16:30] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_grpcadder_proto_init() }
func file_grpcadder_proto_init() {
	if File_grpcadder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpcadder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketConfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketConfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketDecodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsPacketProtocol20Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsPacketProtocol20Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsPacketProtocol18Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsPacketProtocol18Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketDecodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rvariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RvariableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RvalueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rvalue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagOfTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagOfTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagOfType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeCorrectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeCorrectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraWanParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraWanParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionWithEmptyParamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpcadder_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionWithEmptyParamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpcadder_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpcadder_proto_goTypes,
		DependencyIndexes: file_grpcadder_proto_depIdxs,
		EnumInfos:         file_grpcadder_proto_enumTypes,
		MessageInfos:      file_grpcadder_proto_msgTypes,
	}.Build()
	File_grpcadder_proto = out.File
	file_grpcadder_proto_rawDesc = nil
	file_grpcadder_proto_goTypes = nil
	file_grpcadder_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KaratProtoClient is the client API for KaratProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KaratProtoClient interface {
	// Decoder of packet Protocol Karat
	PacketDecode(ctx context.Context, in *PacketDecodeRequest, opts ...grpc.CallOption) (*PacketDecodeResponse, error)
	// List of packet Protocol Karat
	GetPacket(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PacketResponse, error)
	// List of configuration packet Protocol Karat
	GetPacketConf(ctx context.Context, in *PacketConfRequest, opts ...grpc.CallOption) (*PacketConfResponse, error)
	// List of resource
	GetResource(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	// List of resource variable
	GetRvariable(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RvariableResponse, error)
	// List of resource value
	GetRvalue(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RvalueResponse, error)
	// List of unit
	GetUnit(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UnitResponse, error)
	// Coder for function 0x0101 of configuration packet Protocol Karat
	SetSettingsPacketProtocol20(ctx context.Context, in *SettingsPacketProtocol20Request, opts ...grpc.CallOption) (*SettingsPacketProtocol20Response, error)
	// Coder for function 0x0015 of configuration packet Protocol Karat
	SetSettingsPacketProtocol18(ctx context.Context, in *SettingsPacketProtocol18Request, opts ...grpc.CallOption) (*SettingsPacketProtocol18Response, error)
	// List of flag of type
	GetFlagOfType(ctx context.Context, in *FlagOfTypeRequest, opts ...grpc.CallOption) (*FlagOfTypeResponse, error)
	// Set time correct operation
	SetTimeCorrect(ctx context.Context, in *TimeCorrectRequest, opts ...grpc.CallOption) (*TimeCorrectResponse, error)
	// Set packet of query archive
	SetArchQuery(ctx context.Context, in *ArchQueryRequest, opts ...grpc.CallOption) (*ArchQueryResponse, error)
	// Set LoraWan Params operation
	SetLoraWanParams(ctx context.Context, in *LoraWanParamsRequest, opts ...grpc.CallOption) (*LoraWanParamsResponse, error)
	// Set function empty param
	SetFunctionWithEmptyParam(ctx context.Context, in *FunctionWithEmptyParamRequest, opts ...grpc.CallOption) (*FunctionWithEmptyParamResponse, error)
}

type karatProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewKaratProtoClient(cc grpc.ClientConnInterface) KaratProtoClient {
	return &karatProtoClient{cc}
}

func (c *karatProtoClient) PacketDecode(ctx context.Context, in *PacketDecodeRequest, opts ...grpc.CallOption) (*PacketDecodeResponse, error) {
	out := new(PacketDecodeResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/PacketDecode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) GetPacket(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PacketResponse, error) {
	out := new(PacketResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/GetPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) GetPacketConf(ctx context.Context, in *PacketConfRequest, opts ...grpc.CallOption) (*PacketConfResponse, error) {
	out := new(PacketConfResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/GetPacketConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) GetResource(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) GetRvariable(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RvariableResponse, error) {
	out := new(RvariableResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/GetRvariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) GetRvalue(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RvalueResponse, error) {
	out := new(RvalueResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/GetRvalue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) GetUnit(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UnitResponse, error) {
	out := new(UnitResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/GetUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) SetSettingsPacketProtocol20(ctx context.Context, in *SettingsPacketProtocol20Request, opts ...grpc.CallOption) (*SettingsPacketProtocol20Response, error) {
	out := new(SettingsPacketProtocol20Response)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/SetSettingsPacketProtocol20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) SetSettingsPacketProtocol18(ctx context.Context, in *SettingsPacketProtocol18Request, opts ...grpc.CallOption) (*SettingsPacketProtocol18Response, error) {
	out := new(SettingsPacketProtocol18Response)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/SetSettingsPacketProtocol18", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) GetFlagOfType(ctx context.Context, in *FlagOfTypeRequest, opts ...grpc.CallOption) (*FlagOfTypeResponse, error) {
	out := new(FlagOfTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/GetFlagOfType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) SetTimeCorrect(ctx context.Context, in *TimeCorrectRequest, opts ...grpc.CallOption) (*TimeCorrectResponse, error) {
	out := new(TimeCorrectResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/SetTimeCorrect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) SetArchQuery(ctx context.Context, in *ArchQueryRequest, opts ...grpc.CallOption) (*ArchQueryResponse, error) {
	out := new(ArchQueryResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/SetArchQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) SetLoraWanParams(ctx context.Context, in *LoraWanParamsRequest, opts ...grpc.CallOption) (*LoraWanParamsResponse, error) {
	out := new(LoraWanParamsResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/SetLoraWanParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karatProtoClient) SetFunctionWithEmptyParam(ctx context.Context, in *FunctionWithEmptyParamRequest, opts ...grpc.CallOption) (*FunctionWithEmptyParamResponse, error) {
	out := new(FunctionWithEmptyParamResponse)
	err := c.cc.Invoke(ctx, "/proto.pb.KaratProto/SetFunctionWithEmptyParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KaratProtoServer is the server API for KaratProto service.
type KaratProtoServer interface {
	// Decoder of packet Protocol Karat
	PacketDecode(context.Context, *PacketDecodeRequest) (*PacketDecodeResponse, error)
	// List of packet Protocol Karat
	GetPacket(context.Context, *EmptyRequest) (*PacketResponse, error)
	// List of configuration packet Protocol Karat
	GetPacketConf(context.Context, *PacketConfRequest) (*PacketConfResponse, error)
	// List of resource
	GetResource(context.Context, *EmptyRequest) (*ResourceResponse, error)
	// List of resource variable
	GetRvariable(context.Context, *EmptyRequest) (*RvariableResponse, error)
	// List of resource value
	GetRvalue(context.Context, *EmptyRequest) (*RvalueResponse, error)
	// List of unit
	GetUnit(context.Context, *EmptyRequest) (*UnitResponse, error)
	// Coder for function 0x0101 of configuration packet Protocol Karat
	SetSettingsPacketProtocol20(context.Context, *SettingsPacketProtocol20Request) (*SettingsPacketProtocol20Response, error)
	// Coder for function 0x0015 of configuration packet Protocol Karat
	SetSettingsPacketProtocol18(context.Context, *SettingsPacketProtocol18Request) (*SettingsPacketProtocol18Response, error)
	// List of flag of type
	GetFlagOfType(context.Context, *FlagOfTypeRequest) (*FlagOfTypeResponse, error)
	// Set time correct operation
	SetTimeCorrect(context.Context, *TimeCorrectRequest) (*TimeCorrectResponse, error)
	// Set packet of query archive
	SetArchQuery(context.Context, *ArchQueryRequest) (*ArchQueryResponse, error)
	// Set LoraWan Params operation
	SetLoraWanParams(context.Context, *LoraWanParamsRequest) (*LoraWanParamsResponse, error)
	// Set function empty param
	SetFunctionWithEmptyParam(context.Context, *FunctionWithEmptyParamRequest) (*FunctionWithEmptyParamResponse, error)
}

// UnimplementedKaratProtoServer can be embedded to have forward compatible implementations.
type UnimplementedKaratProtoServer struct {
}

func (*UnimplementedKaratProtoServer) PacketDecode(context.Context, *PacketDecodeRequest) (*PacketDecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PacketDecode not implemented")
}
func (*UnimplementedKaratProtoServer) GetPacket(context.Context, *EmptyRequest) (*PacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPacket not implemented")
}
func (*UnimplementedKaratProtoServer) GetPacketConf(context.Context, *PacketConfRequest) (*PacketConfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPacketConf not implemented")
}
func (*UnimplementedKaratProtoServer) GetResource(context.Context, *EmptyRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (*UnimplementedKaratProtoServer) GetRvariable(context.Context, *EmptyRequest) (*RvariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRvariable not implemented")
}
func (*UnimplementedKaratProtoServer) GetRvalue(context.Context, *EmptyRequest) (*RvalueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRvalue not implemented")
}
func (*UnimplementedKaratProtoServer) GetUnit(context.Context, *EmptyRequest) (*UnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnit not implemented")
}
func (*UnimplementedKaratProtoServer) SetSettingsPacketProtocol20(context.Context, *SettingsPacketProtocol20Request) (*SettingsPacketProtocol20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSettingsPacketProtocol20 not implemented")
}
func (*UnimplementedKaratProtoServer) SetSettingsPacketProtocol18(context.Context, *SettingsPacketProtocol18Request) (*SettingsPacketProtocol18Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSettingsPacketProtocol18 not implemented")
}
func (*UnimplementedKaratProtoServer) GetFlagOfType(context.Context, *FlagOfTypeRequest) (*FlagOfTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlagOfType not implemented")
}
func (*UnimplementedKaratProtoServer) SetTimeCorrect(context.Context, *TimeCorrectRequest) (*TimeCorrectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimeCorrect not implemented")
}
func (*UnimplementedKaratProtoServer) SetArchQuery(context.Context, *ArchQueryRequest) (*ArchQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArchQuery not implemented")
}
func (*UnimplementedKaratProtoServer) SetLoraWanParams(context.Context, *LoraWanParamsRequest) (*LoraWanParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLoraWanParams not implemented")
}
func (*UnimplementedKaratProtoServer) SetFunctionWithEmptyParam(context.Context, *FunctionWithEmptyParamRequest) (*FunctionWithEmptyParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFunctionWithEmptyParam not implemented")
}

func RegisterKaratProtoServer(s *grpc.Server, srv KaratProtoServer) {
	s.RegisterService(&_KaratProto_serviceDesc, srv)
}

func _KaratProto_PacketDecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketDecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).PacketDecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/PacketDecode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).PacketDecode(ctx, req.(*PacketDecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_GetPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).GetPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/GetPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).GetPacket(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_GetPacketConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).GetPacketConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/GetPacketConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).GetPacketConf(ctx, req.(*PacketConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).GetResource(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_GetRvariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).GetRvariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/GetRvariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).GetRvariable(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_GetRvalue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).GetRvalue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/GetRvalue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).GetRvalue(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_GetUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).GetUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/GetUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).GetUnit(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_SetSettingsPacketProtocol20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsPacketProtocol20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).SetSettingsPacketProtocol20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/SetSettingsPacketProtocol20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).SetSettingsPacketProtocol20(ctx, req.(*SettingsPacketProtocol20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_SetSettingsPacketProtocol18_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsPacketProtocol18Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).SetSettingsPacketProtocol18(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/SetSettingsPacketProtocol18",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).SetSettingsPacketProtocol18(ctx, req.(*SettingsPacketProtocol18Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_GetFlagOfType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagOfTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).GetFlagOfType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/GetFlagOfType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).GetFlagOfType(ctx, req.(*FlagOfTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_SetTimeCorrect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeCorrectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).SetTimeCorrect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/SetTimeCorrect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).SetTimeCorrect(ctx, req.(*TimeCorrectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_SetArchQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).SetArchQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/SetArchQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).SetArchQuery(ctx, req.(*ArchQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_SetLoraWanParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoraWanParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).SetLoraWanParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/SetLoraWanParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).SetLoraWanParams(ctx, req.(*LoraWanParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaratProto_SetFunctionWithEmptyParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionWithEmptyParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaratProtoServer).SetFunctionWithEmptyParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.pb.KaratProto/SetFunctionWithEmptyParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaratProtoServer).SetFunctionWithEmptyParam(ctx, req.(*FunctionWithEmptyParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KaratProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.pb.KaratProto",
	HandlerType: (*KaratProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PacketDecode",
			Handler:    _KaratProto_PacketDecode_Handler,
		},
		{
			MethodName: "GetPacket",
			Handler:    _KaratProto_GetPacket_Handler,
		},
		{
			MethodName: "GetPacketConf",
			Handler:    _KaratProto_GetPacketConf_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _KaratProto_GetResource_Handler,
		},
		{
			MethodName: "GetRvariable",
			Handler:    _KaratProto_GetRvariable_Handler,
		},
		{
			MethodName: "GetRvalue",
			Handler:    _KaratProto_GetRvalue_Handler,
		},
		{
			MethodName: "GetUnit",
			Handler:    _KaratProto_GetUnit_Handler,
		},
		{
			MethodName: "SetSettingsPacketProtocol20",
			Handler:    _KaratProto_SetSettingsPacketProtocol20_Handler,
		},
		{
			MethodName: "SetSettingsPacketProtocol18",
			Handler:    _KaratProto_SetSettingsPacketProtocol18_Handler,
		},
		{
			MethodName: "GetFlagOfType",
			Handler:    _KaratProto_GetFlagOfType_Handler,
		},
		{
			MethodName: "SetTimeCorrect",
			Handler:    _KaratProto_SetTimeCorrect_Handler,
		},
		{
			MethodName: "SetArchQuery",
			Handler:    _KaratProto_SetArchQuery_Handler,
		},
		{
			MethodName: "SetLoraWanParams",
			Handler:    _KaratProto_SetLoraWanParams_Handler,
		},
		{
			MethodName: "SetFunctionWithEmptyParam",
			Handler:    _KaratProto_SetFunctionWithEmptyParam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcadder.proto",
}
